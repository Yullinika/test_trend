{"version":3,"sources":["components/Photo.js","components/PhotoList.js","components/Album.js","components/AlbumInfo.js","components/AlbumList.js","components/SearchBar.js","components/GoogleApi.js","App.js","serviceWorker.js","index.js"],"names":["Photo","bgStyle","backgroundImage","this","props","elementUrl","baseUrl","backgroundPosition","backgroundSize","backgroundRepeat","react_default","a","createElement","className","style","React","Component","PhotosList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onBackToAlbums","onTypePageAlbums","state","isLoadPhotos","photosList","nextPageToken","bind","assertThisInitialized","onLoadNextPage","_this2","oauthToken","localStorage","getItem","albumId","nextPage","fetch","method","headers","Content-type","Authorization","then","res","json","result","console","log","setState","concat","values","mediaItems","error","_this3","elements","map","item","components_Photo","key","id","viewMore","onClick","Album","loadPhotos","setItem","elementInfo","onOpenAlbum","openAlbumInfo","onOpenAlbumInfo","isLoadPhoto","albumInfo","coverPhotoBaseUrl","PhotoList","onTypePageChange","title","mediaItemsCount","AlbumInfo","album","type","onClose","AlbumsList","albumForOpen","onCloseAlbumInfo","onTypePagePhotos","isLoadAlbums","albumsList","encodeURIComponent","isLoaded","albums","filter","indexOf","filterText","components_Album","components_AlbumInfo","SearchBar","heandeChangeTextFilter","e","onChangeTextFilter","target","value","textFilter","onChange","GoogleAPIs","typePage","onChangeFilterText","authSuccess","googleAuth","googleGetAuthResponse","accessToken","sessionStorage","isAuth","clientId","scope","components_SearchBar","AlbumList","react_google_oauth","onLoginSuccess","App","GoogleApi","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e92ec53.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Photo extends React.Component {\r\n    // constructor(props) {\r\n    //     super(props);\r\n    //\r\n    // }\r\n\r\n\r\n\r\n    render(){\r\n        const bgStyle = {\r\n            backgroundImage: \"url(\" + this.props.elementUrl.baseUrl + \")\",\r\n            backgroundPosition: 'center',\r\n            backgroundSize: 'cover',\r\n            backgroundRepeat: 'noRepeat'\r\n        };\r\n        return <div className=\"col-xs-4 col-sm-3 col-md-3\">\r\n            <div className=\"thumbnail photo\" >\r\n                <div className=\"photo_img\" style={ bgStyle }/>\r\n            </div>\r\n        </div>\r\n\r\n    }\r\n}\r\n\r\nexport default Photo;","import React from 'react';\r\nimport Photo from \"./Photo\";\r\n\r\nclass PhotosList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoadPhotos: false,\r\n            photosList: [],\r\n            nextPageToken: null\r\n        };\r\n        this.onBackToAlbums = this.onBackToAlbums.bind(this);\r\n        this.onLoadNextPage = this.onLoadNextPage.bind(this);\r\n    }\r\n\r\n    onBackToAlbums = () => {\r\n        this.props.onTypePageAlbums('albums');\r\n    };\r\n    onLoadNextPage(){\r\n        const oauthToken = localStorage.getItem('access_token');\r\n        const albumId = localStorage.getItem('albumId');\r\n        const nextPage = this.state.nextPageToken;\r\n        fetch('https://photoslibrary.googleapis.com/v1/mediaItems:search?albumId=' + albumId+'&pageToken='+nextPage,{\r\n                method: 'post',\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                    \"Authorization\": \"Bearer \" + oauthToken\r\n                }\r\n            }\r\n        )\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    console.log(result);\r\n                    this.setState({\r\n                        isLoadPhotos: true,\r\n                        photosList: this.state.photosList.concat(Object.values(result.mediaItems)),\r\n                        nextPageToken: result.nextPageToken\r\n                    });\r\n                },\r\n                (error) => {\r\n\r\n                }\r\n            );\r\n    }\r\n    componentDidMount() {\r\n        if(!this.state.nextPageToken){\r\n            const oauthToken = localStorage.getItem('access_token');\r\n            const albumId = localStorage.getItem('albumId');\r\n            console.log(\"albumId = \", albumId);\r\n            fetch('https://photoslibrary.googleapis.com/v1/mediaItems:search?albumId=' + albumId,{\r\n                    method: 'post',\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                        \"Authorization\": \"Bearer \" + oauthToken\r\n                    }\r\n                }\r\n            )\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        console.log(result);\r\n                        this.setState({\r\n                            isLoadPhotos: true,\r\n                            photosList: Object.values(result.mediaItems),\r\n                            nextPageToken: result.nextPageToken\r\n                        });\r\n\r\n                    },\r\n                    (error) => {\r\n\r\n                    }\r\n                );\r\n        }\r\n\r\n    };\r\n\r\n    render(){\r\n        const photosList = this.state.photosList;\r\n        console.log(\"photosList = \",photosList);\r\n        if(photosList == null){\r\n            return <div>Loading...</div>;\r\n        }\r\n        const elements = photosList.map(item => <Photo key={item.id} elementUrl={item}/>);\r\n        const viewMore = this.state.nextPageToken ? <div className=\"col-xs-4 col-sm-3 col-md-3\"> <button className=\"btn btn-default\" onClick={this.onLoadNextPage}>Показать еще</button></div>: null;\r\n        return <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n                <div className=\"form-group\"><br/>\r\n                    <button className=\"btn btn-default\" onClick={this.onBackToAlbums}>Назад к альбомам</button>\r\n                </div>\r\n                <hr/>\r\n            </div>\r\n            <div className=\"col-md-12\">\r\n                <div className=\"row\">\r\n                    {elements}\r\n                    {viewMore}\r\n                </div>\r\n            </div>\r\n        </div>;\r\n\r\n    }\r\n}\r\n\r\nexport default PhotosList;","import React from 'react';\r\nimport PhotosList from \"./PhotoList\";\r\n\r\nclass Album extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoadPhoto: false\r\n        };\r\n        this.loadPhotos = this.loadPhotos.bind(this);\r\n        this.openAlbumInfo = this.openAlbumInfo.bind(this);\r\n    }\r\n\r\n    loadPhotos = function() {\r\n        localStorage.setItem('albumId', this.props.elementInfo.id);\r\n        this.props.onOpenAlbum();\r\n        this.setState({\r\n            isLoadPhotos: true\r\n        });\r\n    };\r\n\r\n    openAlbumInfo = () => {\r\n       this.props.onOpenAlbumInfo(this.props.elementInfo);\r\n    };\r\n\r\n    render(){\r\n        const albumInfo = this.props.elementInfo;\r\n        const bgSrc = albumInfo.coverPhotoBaseUrl;\r\n        const bgStyle = {\r\n            backgroundImage: \"url(\" + bgSrc + \")\",\r\n            backgroundPosition: 'center',\r\n            backgroundSize: 'cover',\r\n            backgroundRepeat: 'noRepeat'\r\n        };\r\n\r\n        if(!this.state.isLoadPhotos){\r\n            return <div className=\"col-sm-6 col-md-4\">\r\n                <div className=\"thumbnail album\" onClick={this.openAlbumInfo}>\r\n                    <div className=\"album_img\" style={ bgStyle }/>\r\n                    <div className=\"caption album_caption\">\r\n                        <h4>{albumInfo.title}</h4>\r\n                        <h5><span className=\"glyphicon glyphicon-picture\"></span> {albumInfo.mediaItemsCount}</h5>\r\n                        <button className=\"btn btn-default\" onClick={this.loadPhotos}>Смотреть фото</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        } else {\r\n            return <PhotosList onTypePageAlbums={this.onTypePageChange}/>\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default Album;","import React from 'react';\r\nimport Photo from \"./Photo\";\r\n\r\nclass AlbumInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoadPhotos: false,\r\n            photosList: null,\r\n            nextPageToken: null\r\n        };\r\n        this.onLoadNextPage = this.onLoadNextPage.bind(this);\r\n    }\r\n    onLoadNextPage(){\r\n        const oauthToken = localStorage.getItem('access_token');\r\n        const albumId = localStorage.getItem('albumId');\r\n        const nextPage = this.state.nextPageToken;\r\n        fetch('https://photoslibrary.googleapis.com/v1/mediaItems:search?albumId=' + albumId+'&pageToken='+nextPage,{\r\n                method: 'post',\r\n                headers: {\r\n                    \"Content-type\": \"application/json\",\r\n                    \"Authorization\": \"Bearer \" + oauthToken\r\n                }\r\n            }\r\n        )\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    console.log(result);\r\n                    this.setState({\r\n                        isLoadPhotos: true,\r\n                        photosList: this.state.photosList.concat(Object.values(result.mediaItems)),\r\n                        nextPageToken: result.nextPageToken\r\n                    });\r\n                },\r\n                (error) => {\r\n\r\n                }\r\n            );\r\n    }\r\n    componentDidMount() {\r\n        const oauthToken = localStorage.getItem('access_token');\r\n        const albumId = localStorage.getItem('albumId');\r\n        if(!this.state.nextPageToken) {\r\n            fetch('https://photoslibrary.googleapis.com/v1/mediaItems:search?albumId=' + albumId, {\r\n                    method: 'post',\r\n                    headers: {\r\n                        \"Content-type\": \"application/json\",\r\n                        \"Authorization\": \"Bearer \" + oauthToken\r\n                    }\r\n                }\r\n            )\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        this.setState({\r\n                            isLoadPhotos: true,\r\n                            photosList: Object.values(result.mediaItems),\r\n                            nextPageToken: result.nextPageToken\r\n                        });\r\n\r\n                    },\r\n                    (error) => {\r\n\r\n                    }\r\n                );\r\n        }\r\n    };\r\n    render() {\r\n        if (!this.props.album) {\r\n            return null;\r\n        }\r\n        const photosList = this.state.photosList;\r\n        const elements = photosList.map(item => <Photo key={item.id} elementUrl={item}/>);\r\n        const viewMore = this.state.nextPageToken ? <div className=\"col-xs-4 col-sm-3 col-md-3\"> <button className=\"btn btn-default\" onClick={this.onLoadNextPage}>Показать еще</button></div>: null;\r\n        return <div className='popup'>\r\n            <div className='popup_inner modal in'>\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <button type=\"button\" className=\"close\" onClick={this.props.onClose}>&times;</button>\r\n                            <h4 className=\"modal-title\">{this.props.album.title}</h4>\r\n                            <ul className='list-unstyled'>\r\n                                <li><span>mediaItemsCount: </span>{this.props.album.mediaItemsCount}</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div className=\"modal-body clearfix\">\r\n                            <div className='row'>\r\n                                {elements}\r\n                                {viewMore}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default AlbumInfo;","import React from 'react';\r\nimport Album from \"./Album\";\r\nimport AlbumInfo from \"./AlbumInfo\";\r\n\r\nclass AlbumsList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isLoadAlbums: false,\r\n            albumsList: null,\r\n            albumForOpen: null,\r\n            nextPageToken: null\r\n        };\r\n        this.onOpenAlbum = this.onOpenAlbum.bind(this);\r\n        this.onOpenAlbumInfo = this.onOpenAlbumInfo.bind(this);\r\n        this.onCloseAlbumInfo = this.onCloseAlbumInfo.bind(this);\r\n    }\r\n\r\n    onOpenAlbumInfo = (album) => {\r\n        this.setState({albumForOpen: album});\r\n    };\r\n\r\n    onCloseAlbumInfo = () => {\r\n        this.setState({albumForOpen: null})\r\n    };\r\n\r\n    onOpenAlbum = () => {\r\n        this.props.onTypePagePhotos('photos');\r\n    };\r\n\r\n    componentDidMount() {\r\n        const oauthToken = localStorage.getItem('access_token');\r\n        fetch('https://photoslibrary.googleapis.com/v1/albums' +\r\n            '?access_token=' + encodeURIComponent(oauthToken)\r\n        )\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        isLoaded: true,\r\n                        albumsList: Object.values(result.albums),\r\n                        nextPageToken: result.nextPageToken\r\n                    });\r\n                    // console.log(result);\r\n                }\r\n            );\r\n    };\r\n\r\n    render() {\r\n        const albumsList = this.state.albumsList;\r\n        if (albumsList == null) {\r\n            return <div className=\"col-md-12\">Loading...</div>\r\n        }\r\n        const elements = albumsList.filter(item => item.title.indexOf(this.props.filterText) >= 0).map(item => <Album\r\n            key={item.id} elementInfo={item} onOpenAlbum={this.onOpenAlbum} onOpenAlbumInfo={this.onOpenAlbumInfo}/>);\r\n        return <div>\r\n            {elements}\r\n            <AlbumInfo album={this.state.albumForOpen} onClose={this.onCloseAlbumInfo}/>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default AlbumsList;","import React from 'react';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.heandeChangeTextFilter = this.heandeChangeTextFilter.bind(this);\r\n    }\r\n\r\n    heandeChangeTextFilter = (e) => {\r\n        this.props.onChangeTextFilter(e.target.value);\r\n    };\r\n\r\n    render() {\r\n        return <div className=\"col-md-12\">\r\n            <div className=\"form-group\"><br/>\r\n            <input type=\"text\" className=\"form-control\" value={this.props.textFilter}\r\n                   onChange={this.heandeChangeTextFilter}/>\r\n            </div>\r\n            <hr/>\r\n        </div>\r\n    }\r\n\r\n}\r\n\r\nexport default SearchBar;","import React, {Component} from 'react';\r\nimport {GoogleAPI, GoogleLogin, GoogleLogout, googleGetAuthResponse} from 'react-google-oauth'\r\nimport AlbumsList from \"./AlbumList\";\r\nimport PhotosList from \"./PhotoList\";\r\nimport SearchBar from \"./SearchBar\";\r\n\r\n\r\nclass GoogleAPIs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.clientId = \"600756880051-t2quk096og52s9i6h4vv7ugg7ael46kr.apps.googleusercontent.com\";\r\n        this.scope = 'https://www.googleapis.com/auth/photoslibrary.readonly';\r\n        this.googleAuth = localStorage.getItem('access_token') || false;\r\n        this.state = {\r\n            typePage: localStorage.getItem('typePage') || \"albums\",\r\n            isAuth: this.googleAuth,\r\n            filterText: ''\r\n        };\r\n        this.authSuccess = this.authSuccess.bind(this);\r\n        this.onTypePageChange = this.onTypePageChange.bind(this);\r\n\r\n    };\r\n\r\n    onTypePageChange = (typePage) => {\r\n        this.setState({typePage: typePage});\r\n        localStorage.setItem('typePage', typePage);\r\n    };\r\n\r\n    onChangeFilterText = (filterText) => {\r\n        this.setState({filterText: filterText});\r\n    };\r\n\r\n    authSuccess = function () {\r\n        this.googleAuth = googleGetAuthResponse();\r\n        const oauthToken = this.googleAuth.accessToken;\r\n        localStorage.setItem('access_token', oauthToken);\r\n        sessionStorage.setItem('session_auth', 'true');\r\n        localStorage.setItem('typePage', \"albums\");\r\n        this.setState({\r\n            isAuth: true\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const sessionAuth = sessionStorage.getItem('session_auth') || false;\r\n        if (!sessionAuth) {\r\n            return <GoogleAPI clientId={this.clientId} scope={this.scope}>\r\n                <div>\r\n                    <div><GoogleLogin onLoginSuccess={this.authSuccess.bind(this)}/>\r\n                    </div>\r\n                    <div><GoogleLogout/></div>\r\n                </div>\r\n            </GoogleAPI>;\r\n        } else {\r\n            if (this.state.typePage === 'albums') {\r\n                return <div>\r\n                    <SearchBar filterText={this.state.filterText} onChangeTextFilter={this.onChangeFilterText}/>\r\n                    <AlbumsList filterText={this.state.filterText} onTypePagePhotos={this.onTypePageChange}/>\r\n                    </div>\r\n\r\n            } else {\r\n                return <PhotosList onTypePageAlbums={this.onTypePageChange}/>\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default GoogleAPIs;","import React, { Component } from 'react';\nimport './App.css';\nimport GoogleAPIs from \"./components/GoogleApi\";\n\nclass App extends Component {\n  render() {\n    return <GoogleAPIs/>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// ReactDOM.render(<GoogleLogin />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}